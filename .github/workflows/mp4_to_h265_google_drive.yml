name: Python Video Converter (H.265/H.266)

on:
  workflow_dispatch:
    inputs:
      google_drive_urls:
        description: 'Google Drive share URLs (comma-separated)'
        required: true
        default: 'https://drive.google.com/file/d/1nCShWwoVs-3a_G4852_jJgC979b1pd_W/view?usp=sharing'
      output_directory:
        description: 'Directory to save converted videos'
        required: true
        default: 'converted_videos'
      codec:
        description: 'Video codec to use'
        required: true
        default: 'libx265'
        type: choice
        options:
          - libx265
          - libx264
          - libvvenc
      bitrate:
        description: 'Target bitrate (e.g., 500k, 1M, 2M)'
        required: true
        default: '500k'
      preset:
        description: 'Encoding preset (affects speed vs quality)'
        required: true
        default: 'veryslow'
        type: choice
        options:
          - ultrafast
          - superfast
          - veryfast
          - faster
          - fast
          - medium
          - slow
          - slower
          - veryslow
      resolution:
        description: 'Output resolution (e.g., 480, 720, 1080, or original)'
        required: true
        default: '480'
      keep_audio:
        description: 'Keep audio in output'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      use_two_pass:
        description: 'Use two-pass encoding for better bitrate control'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      quality_mode:
        description: 'Quality mode (bitrate-based or quality-based)'
        required: true
        default: 'bitrate'
        type: choice
        options:
          - bitrate
          - quality
      crf_value:
        description: 'CRF value for quality-based encoding (18-28 recommended)'
        required: false
        default: '23'

jobs:
  convert-videos:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg build-essential cmake git wget bc jq
          pip install --upgrade pip
          pip install gdown

          echo "🔍 Checking for advanced codecs..."
          ffmpeg -encoders | grep -E "(libx265|libx264|libvvenc)" || echo "Standard encoders available"

      - name: Create Python conversion script
        run: |
          cat > video_converter.py << 'EOF'
          #!/usr/bin/env python3
          
          import os
          import sys
          import subprocess
          import argparse
          import glob
          import json
          from pathlib import Path
          from datetime import datetime
          
          class VideoConverter:
              def __init__(self):
                  self.supported_formats = ['.mp4', '.mkv', '.avi', '.mov', '.webm', '.flv', '.m4v']
                  self.conversion_stats = []
              
              def check_ffmpeg(self):
                  """Check if FFmpeg is installed and get available encoders"""
                  try:
                      result = subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True, text=True)
                      print("✅ FFmpeg is available")
                      
                      encoders_result = subprocess.run(['ffmpeg', '-encoders'], capture_output=True, text=True)
                      available_encoders = {
                          'libx264': 'libx264' in encoders_result.stdout,
                          'libx265': 'libx265' in encoders_result.stdout,
                          'libvvenc': 'libvvenc' in encoders_result.stdout
                      }
                      
                      print("📋 Available encoders:")
                      for encoder, available in available_encoders.items():
                          status = "✅" if available else "❌"
                          print(f"   {status} {encoder}")
                      
                      return True, available_encoders
                  except (subprocess.CalledProcessError, FileNotFoundError):
                      return False, {}
              
              def get_file_size(self, filepath):
                  """Get file size in human readable format"""
                  size = os.path.getsize(filepath)
                  for unit in ['B', 'KB', 'MB', 'GB']:
                      if size < 1024.0:
                          return f"{size:.1f} {unit}"
                      size /= 1024.0
                  return f"{size:.1f} TB"
              
              def get_video_info(self, filepath):
                  """Get video information using ffprobe"""
                  try:
                      cmd = [
                          'ffprobe', '-v', 'quiet', '-print_format', 'json',
                          '-show_format', '-show_streams', filepath
                      ]
                      result = subprocess.run(cmd, capture_output=True, text=True, check=True)
                      return json.loads(result.stdout)
                  except:
                      return None
              
              def expand_file_patterns(self, patterns):
                  """Expand file patterns and filter valid video files"""
                  files = []
                  for pattern in patterns:
                      subpatterns = [p.strip() for p in pattern.split(',') if p.strip()]
                      for subpattern in subpatterns:
                          files.extend(glob.glob(subpattern))
                  
                  valid_files = []
                  for file in files:
                      if os.path.exists(file) and Path(file).suffix.lower() in self.supported_formats:
                          valid_files.append(file)
                      elif os.path.exists(file):
                          print(f"⚠️  Skipping unsupported format: {file}")
                  
                  return list(set(valid_files))
              
              def build_ffmpeg_command(self, input_file, output_file, config, pass_num=None):
                  """Build FFmpeg command based on configuration"""
                  cmd = ['ffmpeg', '-i', input_file]
                  
                  cmd.extend(['-c:v', config['codec']])
                  cmd.extend(['-preset', config['preset']])
                  
                  if config['quality_mode'] == 'bitrate':
                      cmd.extend(['-b:v', config['bitrate']])
                      if config['use_two_pass']:
                          maxrate = config['bitrate']
                          bufsize = str(int(config['bitrate'][:-1]) * 2) + config['bitrate'][-1]
                          cmd.extend(['-maxrate', maxrate, '-bufsize', bufsize])
                  else:
                      cmd.extend(['-crf', config['crf_value']])
                  
                  if config['resolution'] != 'original':
                      cmd.extend(['-vf', f'scale=-2:{config["resolution"]}'])
                  
                  if config['keep_audio']:
                      cmd.extend(['-c:a', 'aac', '-b:a', '128k'])
                  else:
                      cmd.extend(['-an'])
                  
                  cmd.extend(['-threads', str(os.cpu_count())])
                  
                  if pass_num:
                      cmd.extend(['-pass', str(pass_num)])
                      if pass_num == 1:
                          cmd.extend(['-f', 'null', '-y', '/dev/null'])
                      else:
                          cmd.extend(['-movflags', '+faststart', '-y', output_file])
                  else:
                      cmd.extend(['-movflags', '+faststart', '-y', output_file])
                  
                  return cmd
              
              def convert_video(self, input_file, output_dir, config):
                  """Convert a single video file"""
                  input_path = Path(input_file)
                  
                  codec_suffix = {
                      'libx264': 'h264', 'libx265': 'h265', 'libvvenc': 'h266'
                  }.get(config['codec'], 'converted')
                  
                  output_filename = f"{input_path.stem}_{codec_suffix}_{config['bitrate']}{input_path.suffix}"
                  output_file = os.path.join(output_dir, output_filename)
                  
                  print(f"🎬 Converting: {input_file}")
                  print(f"📤 Output: {output_file}")
                  
                  video_info = self.get_video_info(input_file)
                  if video_info:
                      video_stream = next((s for s in video_info['streams'] if s['codec_type'] == 'video'), {})
                      print(f"📊 Input: {video_stream.get('codec_name', 'unknown')} {video_stream.get('width', '?')}x{video_stream.get('height', '?')}")
                  
                  start_time = datetime.now()
                  
                  try:
                      if config['use_two_pass'] and config['quality_mode'] == 'bitrate':
                          print("🔄 Running two-pass encoding...")
                          print("   Pass 1/2: Analysis...")
                          pass1_cmd = self.build_ffmpeg_command(input_file, output_file, config, pass_num=1)
                          print(f"   Command: {' '.join(pass1_cmd)}")
                          result = subprocess.run(pass1_cmd, capture_output=True, text=True, check=True)
                          
                          print("   Pass 2/2: Encoding...")
                          pass2_cmd = self.build_ffmpeg_command(input_file, output_file, config, pass_num=2)
                          print(f"   Command: {' '.join(pass2_cmd)}")
                          result = subprocess.run(pass2_cmd, capture_output=True, text=True, check=True)
                      else:
                          print("🔄 Running single-pass encoding...")
                          cmd = self.build_ffmpeg_command(input_file, output_file, config)
                          print(f"   Command: {' '.join(cmd)}")
                          result = subprocess.run(cmd, capture_output=True, text=True, check=True)
                      
                      end_time = datetime.now()
                      conversion_time = (end_time - start_time).total_seconds()
                      
                      if os.path.exists(output_file):
                          original_size = os.path.getsize(input_file)
                          converted_size = os.path.getsize(output_file)
                          compression_ratio = (1 - converted_size / original_size) * 100 if original_size > 0 else 0
                          
                          stats = {
                              'input_file': input_file,
                              'output_file': output_file,
                              'original_size': original_size,
                              'converted_size': converted_size,
                              'compression_ratio': compression_ratio,
                              'conversion_time': conversion_time,
                              'success': True
                          }
                          
                          print(f"✅ Conversion completed!")
                          print(f"   Original: {self.get_file_size(input_file)}")
                          print(f"   Converted: {self.get_file_size(output_file)}")
                          print(f"   Compression: {compression_ratio:.1f}%")
                          print(f"   Time: {conversion_time:.1f}s")
                          
                          self.conversion_stats.append(stats)
                          return True
                      else:
                          print("❌ Output file was not created")
                          return False
                  
                  except subprocess.CalledProcessError as e:
                      print(f"❌ Conversion failed: {e}")
                      print(f"Error output: {e.stderr}")
                      return False
                  except Exception as e:
                      print(f"❌ Unexpected error: {e}")
                      return False
              
              def generate_report(self, output_dir):
                  """Generate a conversion report"""
                  report_file = os.path.join(output_dir, 'conversion_report.json')
                  
                  report = {
                      'timestamp': datetime.now().isoformat(),
                      'total_files': len(self.conversion_stats),
                      'successful_conversions': len([s for s in self.conversion_stats if s['success']]),
                      'total_original_size': sum(s['original_size'] for s in self.conversion_stats),
                      'total_converted_size': sum(s['converted_size'] for s in self.conversion_stats),
                      'conversions': self.conversion_stats
                  }
                  
                  total_original_size = report['total_original_size']
                  total_converted_size = report['total_converted_size']

                  if report['total_files'] > 0 and total_original_size > 0:
                      report['average_compression'] = (1 - total_converted_size / total_original_size) * 100
                      report['total_time'] = sum(s['conversion_time'] for s in self.conversion_stats)
                  
                  with open(report_file, 'w') as f:
                      json.dump(report, f, indent=2)
                  
                  txt_report = os.path.join(output_dir, 'conversion_report.txt')
                  with open(txt_report, 'w') as f:
                      f.write("Video Conversion Report\n")
                      f.write("=" * 50 + "\n\n")
                      f.write(f"Conversion completed: {datetime.now()}\n")
                      f.write(f"Total files processed: {report['total_files']}\n")
                      f.write(f"Successful conversions: {report['successful_conversions']}\n")
                      
                      if report.get('average_compression') is not None:
                          f.write(f"Average compression: {report['average_compression']:.1f}%\n")
                          f.write(f"Total time: {report['total_time']:.1f}s\n")
                          f.write(f"Original total size: {self.get_file_size_bytes(total_original_size)}\n")
                          f.write(f"Converted total size: {self.get_file_size_bytes(total_converted_size)}\n")
                      
                      f.write("\nDetailed Results:\n")
                      f.write("-" * 30 + "\n")
                      
                      for i, stats in enumerate(self.conversion_stats, 1):
                          f.write(f"{i}. {os.path.basename(stats['input_file'])}\n")
                          f.write(f"   Status: {'✅ Success' if stats['success'] else '❌ Failed'}\n")
                          if stats['success']:
                              f.write(f"   Size: {self.get_file_size_bytes(stats['original_size'])} → {self.get_file_size_bytes(stats['converted_size'])}\n")
                              f.write(f"   Compression: {stats['compression_ratio']:.1f}%\n")
                              f.write(f"   Time: {stats['conversion_time']:.1f}s\n")
                          f.write("\n")
                  
                  return report_file, txt_report
              
              def get_file_size_bytes(self, size_bytes):
                  """Convert bytes to human readable format"""
                  if size_bytes is None: return "0 B"
                  for unit in ['B', 'KB', 'MB', 'GB']:
                      if size_bytes < 1024.0:
                          return f"{size_bytes:.1f} {unit}"
                      size_bytes /= 1024.0
                  return f"{size_bytes:.1f} TB"
          
          def main():
              converter = VideoConverter()
              
              parser = argparse.ArgumentParser(description='Advanced Video Converter')
              parser.add_argument('input_files', help='Input files or patterns (comma-separated)')
              parser.add_argument('--output-dir', required=True, help='Output directory')
              parser.add_argument('--codec', default='libx265', help='Video codec')
              parser.add_argument('--bitrate', default='500k', help='Target bitrate')
              parser.add_argument('--preset', default='veryslow', help='Encoding preset')
              parser.add_argument('--resolution', default='480', help='Output resolution')
              parser.add_argument('--keep-audio', action='store_true', help='Keep audio')
              parser.add_argument('--two-pass', action='store_true', help='Use two-pass encoding')
              parser.add_argument('--quality-mode', default='bitrate', choices=['bitrate', 'quality'], help='Quality mode')
              parser.add_argument('--crf', default='23', help='CRF value for quality mode')
              
              args = parser.parse_args()
              
              ffmpeg_available, available_encoders = converter.check_ffmpeg()
              if not ffmpeg_available:
                  print("❌ FFmpeg is not available!")
                  sys.exit(1)
              
              if args.codec not in available_encoders or not available_encoders[args.codec]:
                  print(f"❌ Codec {args.codec} is not available!")
                  print("Available codecs:", [k for k, v in available_encoders.items() if v])
                  sys.exit(1)
              
              os.makedirs(args.output_dir, exist_ok=True)
              
              input_files = converter.expand_file_patterns([args.input_files])
              
              if not input_files:
                  print("❌ No valid input files found!")
                  sys.exit(1)
              
              print(f"🎯 Found {len(input_files)} files to convert")
              
              config = {
                  'codec': args.codec, 'bitrate': args.bitrate, 'preset': args.preset,
                  'resolution': args.resolution, 'keep_audio': args.keep_audio,
                  'use_two_pass': args.two_pass, 'quality_mode': args.quality_mode,
                  'crf_value': args.crf
              }
              
              success_count = 0
              for i, input_file in enumerate(input_files, 1):
                  print(f"\n{'=' * 60}")
                  print(f"Processing {i}/{len(input_files)}: {os.path.basename(input_file)}")
                  print('=' * 60)
                  
                  if converter.convert_video(input_file, args.output_dir, config):
                      success_count += 1
              
              print(f"\n{'=' * 60}")
              print("🎉 Conversion Summary")
              print('=' * 60)
              print(f"Total files: {len(input_files)}")
              print(f"Successful: {success_count}")
              print(f"Failed: {len(input_files) - success_count}")
              
              if converter.conversion_stats:
                  json_report, txt_report = converter.generate_report(args.output_dir)
                  print(f"📊 Reports generated:")
                  print(f"   JSON: {json_report}")
                  print(f"   Text: {txt_report}")
              
              if success_count != len(input_files):
                  sys.exit(1)

          if __name__ == "__main__":
              main()
          EOF

          chmod +x video_converter.py

      - name: Download files from Google Drive
        id: download
        run: |
          echo "📥 Downloading files from Google Drive..."
          mkdir -p downloads

          extract_file_id() {
            local url="$1"
            if [[ $url =~ /file/d/([a-zA-Z0-9_-]+) ]]; then
              echo "${BASH_REMATCH[1]}"
            elif [[ $url =~ id=([a-zA-Z0-9_-]+) ]]; then
              echo "${BASH_REMATCH[1]}"
            else
              echo "Error: Could not extract file ID from URL: $url" >&2
              return 1
            fi
          }

          IFS=',' read -ra URLS <<< "${{ github.event.inputs.google_drive_urls }}"
          DOWNLOADED_FILES=()

          for i in "${!URLS[@]}"; do
            url=$(echo "${URLS[i]}" | xargs) # Trim whitespace
            echo "Processing URL $((i+1)): $url"
            file_id=$(extract_file_id "$url")
            if [ -z "$file_id" ]; then
              echo "❌ Failed to extract file ID from: $url"
              continue
            fi
            
            filename="video_$(date +%s)_$((i+1)).mp4"
            output_path="downloads/$filename"
            
            echo "🔄 Downloading file ID: $file_id to $output_path"
            if gdown --id "$file_id" -O "$output_path"; then
               if [ -s "$output_path" ]; then
                 echo "✅ Successfully downloaded: $output_path ($(du -h "$output_path" | cut -f1))"
                 DOWNLOADED_FILES+=("$output_path")
               else
                 echo "❌ Download failed or file is empty for URL: $url"
                 rm "$output_path"
               fi
            else
              echo "❌ gdown command failed for URL: $url"
            fi
          done

          echo ""
          echo "📁 Downloaded files:"
          ls -la downloads/ || echo "No files downloaded"

          if [ ${#DOWNLOADED_FILES[@]} -eq 0 ]; then
            echo "❌ No files were successfully downloaded!"
            exit 1
          fi
          
          DOWNLOADED_PATHS=$(printf "%s," "${DOWNLOADED_FILES[@]}")
          echo "downloaded_files=${DOWNLOADED_PATHS%,}" >> $GITHUB_OUTPUT
          echo "✅ Successfully downloaded ${#DOWNLOADED_FILES[@]} file(s)"

      - name: Create output directory
        run: |
          mkdir -p "${{ github.event.inputs.output_directory }}"
          echo "📁 Created output directory: ${{ github.event.inputs.output_directory }}"

      - name: Convert videos
        run: |
          echo "🚀 Starting video conversion..."
          echo "Configuration:"
          echo "  Input files: ${{ steps.download.outputs.downloaded_files }}"
          echo "  Output directory: ${{ github.event.inputs.output_directory }}"
          echo "  Codec: ${{ github.event.inputs.codec }}"
          echo "  Bitrate: ${{ github.event.inputs.bitrate }}"
          echo "  Preset: ${{ github.event.inputs.preset }}"
          echo "  Resolution: ${{ github.event.inputs.resolution }}"
          echo "  Keep audio: ${{ github.event.inputs.keep_audio }}"
          echo "  Two-pass: ${{ github.event.inputs.use_two_pass }}"
          echo "  Quality mode: ${{ github.event.inputs.quality_mode }}"
          echo "  CRF value: ${{ github.event.inputs.crf_value }}"
          echo ""

          # Build command arguments
          ARGS=()
          ARGS+=("${{ steps.download.outputs.downloaded_files }}")
          ARGS+=("--output-dir" "${{ github.event.inputs.output_directory }}")
          ARGS+=("--codec" "${{ github.event.inputs.codec }}")
          ARGS+=("--bitrate" "${{ github.event.inputs.bitrate }}")
          ARGS+=("--preset" "${{ github.event.inputs.preset }}")
          ARGS+=("--resolution" "${{ github.event.inputs.resolution }}")
          ARGS+=("--quality-mode" "${{ github.event.inputs.quality_mode }}")
          ARGS+=("--crf" "${{ github.event.inputs.crf_value }}")

          if [ "${{ github.event.inputs.keep_audio }}" = "true" ]; then
            ARGS+=("--keep-audio")
          fi

          if [ "${{ github.event.inputs.use_two_pass }}" = "true" ]; then
            ARGS+=("--two-pass")
          fi

          # Run the conversion
          ./video_converter.py "${ARGS[@]}"

      - name: Display conversion results
        if: always()
        run: |
          echo "📊 Conversion Results:"
          echo "===================="
          
          REPORT_PATH="${{ github.event.inputs.output_directory }}/conversion_report.txt"
          if [ -f "$REPORT_PATH" ]; then
            cat "$REPORT_PATH"
          else
            echo "Report file not found at $REPORT_PATH"
          fi
          
          echo ""
          echo "📁 Output files:"
          ls -la "${{ github.event.inputs.output_directory }}"

      - name: Upload converted videos as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: converted-videos-${{ github.run_id }}
          path: ${{ github.event.inputs.output_directory }}
          retention-days: 7

      - name: Final summary
        if: success()
        run: |
          echo "🎉 Conversion workflow completed!"
          echo "✅ Check the artifacts section to download your converted videos"
          echo "📊 Detailed conversion report is included in the download"
