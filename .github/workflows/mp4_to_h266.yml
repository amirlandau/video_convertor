# .github/workflows/video-conversion.yml

name: Convert Video to H.266/VVC

# This workflow can be triggered manually from the Actions tab in your repository.
on:
  workflow_dispatch:
    inputs:
      input_video:
        description: 'Path to the input video file (e.g., videos/my_video.mp4)'
        required: true
        default: 'duos/after scale/TensorPix - hug.mp4'
      output_directory:
        description: 'Directory to save the converted video'
        required: true
        default: 'converted_videos'
      quality:
        description: 'Quality parameter (qp)'
        required: true
        default: '37'
      bitrate:
        description: 'Target bitrate (e.g., 500k, 1M)'
        required: true
        default: '500k'
      preset:
        description: 'libvvenc encoding preset'
        required: true
        default: 'slower'


jobs:
  convert-video:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        # This step downloads your repository code, making the video file available.

      - name: Set up FFmpeg with libvvenc
        run: |
          # The standard runner doesn't have FFmpeg with libvvenc, so we download a static build.
          # These builds are from the trusted BtbN/FFmpeg-Builds repository.
          echo "Downloading a static build of FFmpeg..."
          # Updated URL to the latest valid build to fix the 404 Not Found error.
          wget https://github.com/BtbN/FFmpeg-Builds/releases/download/autobuild-2024-07-14-12-52/ffmpeg-n7.1-1-g0722a849a9-linux64-gpl-7.1.zip -O ffmpeg.zip
          
          echo "Extracting FFmpeg..."
          unzip ffmpeg.zip
          
          # Add the extracted FFmpeg bin directory to the GitHub Actions path.
          # This makes the `ffmpeg` command available to subsequent steps.
          FFMPEG_PATH=$(find . -type f -name ffmpeg | head -n 1)
          FFMPEG_DIR=$(dirname "$FFMPEG_PATH")
          echo "Adding $FFMPEG_DIR to GITHUB_PATH"
          echo "$FFMPEG_DIR" >> $GITHUB_PATH
          
          # Verify the installation and check for libvvenc
          echo "Verifying FFmpeg version and encoders..."
          ffmpeg -version
          ffmpeg -encoders | grep libvvenc
        # This step ensures the required video converter is available for the job.

      - name: Create Output Directory
        run: mkdir -p ${{ github.event.inputs.output_directory }}
        # Creates the folder to store the converted video file.

      - name: Convert Video using FFmpeg
        run: |
          # Construct the output path and filename
          INPUT_FILENAME=$(basename "${{ github.event.inputs.input_video }}")
          OUTPUT_FILENAME="${INPUT_FILENAME%.*}_h266.mp4"
          OUTPUT_PATH="${{ github.event.inputs.output_directory }}/${OUTPUT_FILENAME}"

          echo "Input video: ${{ github.event.inputs.input_video }}"
          echo "Output path: ${OUTPUT_PATH}"

          # Run the FFmpeg command with parameters from the workflow inputs
          ffmpeg -i "${{ github.event.inputs.input_video }}" \
            -c:v libvvenc \
            -preset "${{ github.event.inputs.preset }}" \
            -qp "${{ github.event.inputs.quality }}" \
            -b:v "${{ github.event.inputs.bitrate }}" \
            -an \
            -vf "scale=480:-2" \
            -threads $(nproc) \
            "${OUTPUT_PATH}"
        # This is the core conversion step.

      - name: Upload Converted Video as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: converted-video-${{ github.run_id }}
          path: ${{ github.event.inputs.output_directory }}
          retention-days: 7
        # This step uploads the contents of the output directory as a downloadable artifact.
        # The artifact will be available on the summary page of the workflow run for 7 days.
